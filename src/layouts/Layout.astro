---
// STYLES //
import "../styles/global.css";

// COMPONENTS //
import Header from "../components/layout/Header.astro";
import Footer from "../components/layout/Footer.astro";
import Loading from "../components/layout/Loading.astro";

const title = "STYL SMYTH";

const isHomePage = Astro.url.pathname === "/";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
  </head>
  <body>
    <!-- Loader -->
    {isHomePage && <Loading />}

    <!-- Main content -->
    <main>
      <div
        class="bg-n-50 relative z-1 overflow-hidden rounded-br-4xl rounded-bl-4xl"
      >
        <!-- Header -->
        <Header />
        <slot />
        <!-- Footer -->
      </div>
      <Footer />
    </main>
  </body>

  <script is:inline>
    if (window.location.pathname === "/") {
      const loader = document.querySelector("#loading-screen");
      const hasLoadedBefore = sessionStorage.getItem("indexLoaderShown");

      if (hasLoadedBefore && loader) {
        // skip instantly if already loaded
        loader.style.display = "none";
      } else {
        loader.style.display = "flex";
      }
    }
  </script>

  <script is:inline>
    const initAccordions = () => {
      const accordions = document.querySelectorAll("[data-accordion]");

      const setOpenState = (acc, open) => {
        const content = acc.querySelector("[data-accordion-content]");
        const arrow = acc.querySelector("[data-accordion-arrow]");
        if (!content || !arrow) return;

        acc.setAttribute("data-open", open ? "true" : "false");

        if (open) {
          // From current height to target, then set to its actual height
          const target = content.scrollHeight;
          requestAnimationFrame(() => {
            content.style.height = target + "px";
          });
          arrow.classList.add("rotate-180");
        } else {
          // If currently auto, fix to pixel value first, then collapse
          const current = content.scrollHeight;
          content.style.height = current + "px";
          requestAnimationFrame(() => {
            content.style.height = "0px";
          });
          arrow.classList.remove("rotate-180");
        }
      };

      // Initialize and bind events
      accordions.forEach((acc) => {
        const btn = acc.querySelector("button");
        const content = acc.querySelector("[data-accordion-content]");
        if (!btn || !content) return;

        const isOpen = acc.getAttribute("data-open") === "true";
        // Set initial height
        content.style.height = isOpen ? "auto" : "0px";
        const arrow = acc.querySelector("[data-accordion-arrow]");
        if (arrow) {
          arrow.classList.toggle("rotate-180", isOpen);
        }

        btn.addEventListener("click", () => {
          const currentlyOpen = acc.getAttribute("data-open") === "true";
          // Close others (accordion group behavior)
          document.querySelectorAll("[data-accordion]").forEach((other) => {
            if (other !== acc && other.getAttribute("data-open") === "true") {
              setOpenState(other, false);
            }
          });
          // Toggle current
          setOpenState(acc, !currentlyOpen);
        });
      });

      // Keep heights accurate on resize for open items
      window.addEventListener("resize", () => {
        document
          .querySelectorAll('[data-accordion][data-open="true"]')
          .forEach((acc) => {
            const content = acc.querySelector("[data-accordion-content]");
            if (content) {
              // If set to auto, keep it; if numeric during animation, update target
              if (content.style.height !== "auto") {
                content.style.height = content.scrollHeight + "px";
              }
            }
          });
      });
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initAccordions);
    } else {
      initAccordions();
    }
  </script>
</html>
